<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use App\Services\LineBotService;
use LINE\LINEBot\MessageBuilder\MultiMessageBuilder;
use Tests\TestCase;
use LINE\LINEBot;

class LineBotServiceTest extends TestCase
{
    /** @var  LineBotService */
    private $lineBotService;



    public function setUp():void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->lineBotService = app(LineBotService::class);
    }

    public function tearDown():void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testPushMessage()
    {
//        $this->markTestSkipped('OK!');
        $response = $this->lineBotService->pushMessage('hello');

        $this->assertEquals(200, $response->getHTTPStatus());
    }


    public function testPushMessageWithObject()
    {
        if (empty(env('LINEBOT_TOKEN'))) {
            $this->markTestSkipped('Invalid LINEBOT_TOKEN');
        }


        //測試用
        $json = <<<JSON
{
  "type":"bubble",
  "size":"giga",
  "direction":"ltr",
  "header":{
    "type":"box",
    "layout":"vertical",
    "contents":[
      {"type":"text", "text":"header"}
    ]
  }
}
JSON;



        $targets = $this->lineBotService->buildFlexMessageBuilder('test push!',json_decode($json, true));
//        dd($targets);
//        foreach ($targets as $target) {
            $response = $this->lineBotService->pushMessage($targets);
//            dd($response);
            $this->assertEquals(200, $response->getHTTPStatus());
//        }
    }

}
